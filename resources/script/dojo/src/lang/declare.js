dojo.provide("dojo.lang.declare");dojo.require("dojo.lang.common");dojo.require("dojo.lang.extras");
dojo.lang.declare=function(c,a,b,e){if(dojo.lang.isFunction(e)||!e&&!dojo.lang.isFunction(b)){var d=e;e=b;b=d}var f=[];if(dojo.lang.isArray(a)){f=a;a=f.shift()}if(!b)if((b=dojo.evalObjPath(c,false))&&!dojo.lang.isFunction(b))b=null;d=dojo.lang.declare._makeConstructor();var g=a?a.prototype:null;if(g){g.prototyping=true;d.prototype=new a;g.prototyping=false}d.superclass=g;d.mixins=f;a=0;for(g=f.length;a<g;a++)dojo.lang.extend(d,f[a].prototype);d.prototype.initializer=null;d.prototype.declaredClass=
c;dojo.lang.isArray(e)?dojo.lang.extend.apply(dojo.lang,[d].concat(e)):dojo.lang.extend(d,e||{});dojo.lang.extend(d,dojo.lang.declare._common);d.prototype.constructor=d;d.prototype.initializer=d.prototype.initializer||b||function(){};c=dojo.parseObjPath(c,null,true);return c.obj[c.prop]=d};
dojo.lang.declare._makeConstructor=function(){return function(){var c=this._getPropContext(),a=c.constructor.superclass;if(a&&a.constructor)a.constructor==arguments.callee?this._inherited("constructor",arguments):this._contextMethod(a,"constructor",arguments);a=c.constructor.mixins||[];for(var b=0,e;e=a[b];b++)(e.prototype&&e.prototype.initializer||e).apply(this,arguments);!this.prototyping&&c.initializer&&c.initializer.apply(this,arguments)}};
dojo.lang.declare._common={_getPropContext:function(){return this.___proto||this},_contextMethod:function(c,a,b){var e,d=this.___proto;this.___proto=c;try{e=c[a].apply(this,b||[])}catch(f){throw f;}finally{this.___proto=d}return e},_inherited:function(c,a){var b=this._getPropContext();do{if(!b.constructor||!b.constructor.superclass)return;b=b.constructor.superclass}while(!(c in b));return dojo.lang.isFunction(b[c])?this._contextMethod(b,c,a):b[c]},inherited:function(c,a){dojo.deprecated("'inherited' method is dangerous, do not up-call! 'inherited' is slated for removal in 0.5; name your super class (or use superclass property) instead.",
"0.5");this._inherited(c,a)}};dojo.declare=dojo.lang.declare;
